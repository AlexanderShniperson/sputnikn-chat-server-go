// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: contract.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChatService_AuthUser_FullMethodName          = "/ru.alexshniperson.sputnikn.api.contract.v1.ChatService/AuthUser"
	ChatService_ListRooms_FullMethodName         = "/ru.alexshniperson.sputnikn.api.contract.v1.ChatService/ListRooms"
	ChatService_SyncRooms_FullMethodName         = "/ru.alexshniperson.sputnikn.api.contract.v1.ChatService/SyncRooms"
	ChatService_ListUsers_FullMethodName         = "/ru.alexshniperson.sputnikn.api.contract.v1.ChatService/ListUsers"
	ChatService_SetRoomReadMarker_FullMethodName = "/ru.alexshniperson.sputnikn.api.contract.v1.ChatService/SetRoomReadMarker"
	ChatService_CreateRoom_FullMethodName        = "/ru.alexshniperson.sputnikn.api.contract.v1.ChatService/CreateRoom"
	ChatService_InviteRoomMember_FullMethodName  = "/ru.alexshniperson.sputnikn.api.contract.v1.ChatService/InviteRoomMember"
	ChatService_RemoveRoomMember_FullMethodName  = "/ru.alexshniperson.sputnikn.api.contract.v1.ChatService/RemoveRoomMember"
	ChatService_AddRoomMessage_FullMethodName    = "/ru.alexshniperson.sputnikn.api.contract.v1.ChatService/AddRoomMessage"
)

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	AuthUser(ctx context.Context, in *AuthUserRequest, opts ...grpc.CallOption) (*AuthUserResponse, error)
	ListRooms(ctx context.Context, in *ListRoomsRequest, opts ...grpc.CallOption) (*ListRoomsResponse, error)
	SyncRooms(ctx context.Context, in *SyncRoomsRequest, opts ...grpc.CallOption) (*SyncRoomsResponse, error)
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	SetRoomReadMarker(ctx context.Context, in *RoomReadMarkerRequest, opts ...grpc.CallOption) (*RoomStateChangedResponse, error)
	CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error)
	InviteRoomMember(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*RoomStateChangedResponse, error)
	RemoveRoomMember(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*RoomStateChangedResponse, error)
	AddRoomMessage(ctx context.Context, in *RoomEventMessageRequest, opts ...grpc.CallOption) (*RoomEventMessageResponse, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) AuthUser(ctx context.Context, in *AuthUserRequest, opts ...grpc.CallOption) (*AuthUserResponse, error) {
	out := new(AuthUserResponse)
	err := c.cc.Invoke(ctx, ChatService_AuthUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ListRooms(ctx context.Context, in *ListRoomsRequest, opts ...grpc.CallOption) (*ListRoomsResponse, error) {
	out := new(ListRoomsResponse)
	err := c.cc.Invoke(ctx, ChatService_ListRooms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) SyncRooms(ctx context.Context, in *SyncRoomsRequest, opts ...grpc.CallOption) (*SyncRoomsResponse, error) {
	out := new(SyncRoomsResponse)
	err := c.cc.Invoke(ctx, ChatService_SyncRooms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, ChatService_ListUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) SetRoomReadMarker(ctx context.Context, in *RoomReadMarkerRequest, opts ...grpc.CallOption) (*RoomStateChangedResponse, error) {
	out := new(RoomStateChangedResponse)
	err := c.cc.Invoke(ctx, ChatService_SetRoomReadMarker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error) {
	out := new(CreateRoomResponse)
	err := c.cc.Invoke(ctx, ChatService_CreateRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) InviteRoomMember(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*RoomStateChangedResponse, error) {
	out := new(RoomStateChangedResponse)
	err := c.cc.Invoke(ctx, ChatService_InviteRoomMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) RemoveRoomMember(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*RoomStateChangedResponse, error) {
	out := new(RoomStateChangedResponse)
	err := c.cc.Invoke(ctx, ChatService_RemoveRoomMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) AddRoomMessage(ctx context.Context, in *RoomEventMessageRequest, opts ...grpc.CallOption) (*RoomEventMessageResponse, error) {
	out := new(RoomEventMessageResponse)
	err := c.cc.Invoke(ctx, ChatService_AddRoomMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility
type ChatServiceServer interface {
	AuthUser(context.Context, *AuthUserRequest) (*AuthUserResponse, error)
	ListRooms(context.Context, *ListRoomsRequest) (*ListRoomsResponse, error)
	SyncRooms(context.Context, *SyncRoomsRequest) (*SyncRoomsResponse, error)
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	SetRoomReadMarker(context.Context, *RoomReadMarkerRequest) (*RoomStateChangedResponse, error)
	CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error)
	InviteRoomMember(context.Context, *EmptyRequest) (*RoomStateChangedResponse, error)
	RemoveRoomMember(context.Context, *EmptyRequest) (*RoomStateChangedResponse, error)
	AddRoomMessage(context.Context, *RoomEventMessageRequest) (*RoomEventMessageResponse, error)
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) AuthUser(context.Context, *AuthUserRequest) (*AuthUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthUser not implemented")
}
func (UnimplementedChatServiceServer) ListRooms(context.Context, *ListRoomsRequest) (*ListRoomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRooms not implemented")
}
func (UnimplementedChatServiceServer) SyncRooms(context.Context, *SyncRoomsRequest) (*SyncRoomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncRooms not implemented")
}
func (UnimplementedChatServiceServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedChatServiceServer) SetRoomReadMarker(context.Context, *RoomReadMarkerRequest) (*RoomStateChangedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRoomReadMarker not implemented")
}
func (UnimplementedChatServiceServer) CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedChatServiceServer) InviteRoomMember(context.Context, *EmptyRequest) (*RoomStateChangedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteRoomMember not implemented")
}
func (UnimplementedChatServiceServer) RemoveRoomMember(context.Context, *EmptyRequest) (*RoomStateChangedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRoomMember not implemented")
}
func (UnimplementedChatServiceServer) AddRoomMessage(context.Context, *RoomEventMessageRequest) (*RoomEventMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoomMessage not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_AuthUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).AuthUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_AuthUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).AuthUser(ctx, req.(*AuthUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ListRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ListRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_ListRooms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ListRooms(ctx, req.(*ListRoomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_SyncRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRoomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SyncRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_SyncRooms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SyncRooms(ctx, req.(*SyncRoomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_SetRoomReadMarker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomReadMarkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SetRoomReadMarker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_SetRoomReadMarker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SetRoomReadMarker(ctx, req.(*RoomReadMarkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_CreateRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreateRoom(ctx, req.(*CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_InviteRoomMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).InviteRoomMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_InviteRoomMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).InviteRoomMember(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_RemoveRoomMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).RemoveRoomMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_RemoveRoomMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).RemoveRoomMember(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_AddRoomMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomEventMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).AddRoomMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_AddRoomMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).AddRoomMessage(ctx, req.(*RoomEventMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ru.alexshniperson.sputnikn.api.contract.v1.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthUser",
			Handler:    _ChatService_AuthUser_Handler,
		},
		{
			MethodName: "ListRooms",
			Handler:    _ChatService_ListRooms_Handler,
		},
		{
			MethodName: "SyncRooms",
			Handler:    _ChatService_SyncRooms_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _ChatService_ListUsers_Handler,
		},
		{
			MethodName: "SetRoomReadMarker",
			Handler:    _ChatService_SetRoomReadMarker_Handler,
		},
		{
			MethodName: "CreateRoom",
			Handler:    _ChatService_CreateRoom_Handler,
		},
		{
			MethodName: "InviteRoomMember",
			Handler:    _ChatService_InviteRoomMember_Handler,
		},
		{
			MethodName: "RemoveRoomMember",
			Handler:    _ChatService_RemoveRoomMember_Handler,
		},
		{
			MethodName: "AddRoomMessage",
			Handler:    _ChatService_AddRoomMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contract.proto",
}

const (
	ChatStreamService_RoomEventStream_FullMethodName = "/ru.alexshniperson.sputnikn.api.contract.v1.ChatStreamService/RoomEventStream"
)

// ChatStreamServiceClient is the client API for ChatStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatStreamServiceClient interface {
	RoomEventStream(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (ChatStreamService_RoomEventStreamClient, error)
}

type chatStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatStreamServiceClient(cc grpc.ClientConnInterface) ChatStreamServiceClient {
	return &chatStreamServiceClient{cc}
}

func (c *chatStreamServiceClient) RoomEventStream(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (ChatStreamService_RoomEventStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatStreamService_ServiceDesc.Streams[0], ChatStreamService_RoomEventStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &chatStreamServiceRoomEventStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatStreamService_RoomEventStreamClient interface {
	Recv() (*RoomEventResponse, error)
	grpc.ClientStream
}

type chatStreamServiceRoomEventStreamClient struct {
	grpc.ClientStream
}

func (x *chatStreamServiceRoomEventStreamClient) Recv() (*RoomEventResponse, error) {
	m := new(RoomEventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatStreamServiceServer is the server API for ChatStreamService service.
// All implementations must embed UnimplementedChatStreamServiceServer
// for forward compatibility
type ChatStreamServiceServer interface {
	RoomEventStream(*EmptyRequest, ChatStreamService_RoomEventStreamServer) error
	mustEmbedUnimplementedChatStreamServiceServer()
}

// UnimplementedChatStreamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatStreamServiceServer struct {
}

func (UnimplementedChatStreamServiceServer) RoomEventStream(*EmptyRequest, ChatStreamService_RoomEventStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method RoomEventStream not implemented")
}
func (UnimplementedChatStreamServiceServer) mustEmbedUnimplementedChatStreamServiceServer() {}

// UnsafeChatStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatStreamServiceServer will
// result in compilation errors.
type UnsafeChatStreamServiceServer interface {
	mustEmbedUnimplementedChatStreamServiceServer()
}

func RegisterChatStreamServiceServer(s grpc.ServiceRegistrar, srv ChatStreamServiceServer) {
	s.RegisterService(&ChatStreamService_ServiceDesc, srv)
}

func _ChatStreamService_RoomEventStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatStreamServiceServer).RoomEventStream(m, &chatStreamServiceRoomEventStreamServer{stream})
}

type ChatStreamService_RoomEventStreamServer interface {
	Send(*RoomEventResponse) error
	grpc.ServerStream
}

type chatStreamServiceRoomEventStreamServer struct {
	grpc.ServerStream
}

func (x *chatStreamServiceRoomEventStreamServer) Send(m *RoomEventResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ChatStreamService_ServiceDesc is the grpc.ServiceDesc for ChatStreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatStreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ru.alexshniperson.sputnikn.api.contract.v1.ChatStreamService",
	HandlerType: (*ChatStreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RoomEventStream",
			Handler:       _ChatStreamService_RoomEventStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "contract.proto",
}
